\documentclass[xcolor=dvipsnames, aspectratio=169, 12pt]{beamer}
\usepackage[utf8]{inputenc}
\usepackage{mathtools}%for xarrows
\usepackage[english]{babel}
\usepackage{ragged2e}%pour justifier le text, apr√®s il suffit de tapper \justifying avant le paragraphe
\setbeamertemplate{navigation symbols}{}%no nav symbols
\usetheme[secheader]{Madrid}%

\title{Programming with objects in R}
\author[Alexandre Courtiol]{Alexandre Courtiol}
\institute[IZW]{Leibniz Institute for Zoo and Wildlife Research}%
\date[21 March 2018]{\small 21 March 2018}%

\newcommand{\h}[1]{\textcolor{blue}{\bf #1}}
\newcommand{\n}[1]{\scriptsize {\bf Note:} #1}


\begin{document}
\maketitle{}

\setlength{\topsep}{1pt}%space between input and output
<<echo = FALSE, message = FALSE>>=
options(width = 80)
opts_chunk$set("size" = "scriptsize", prompt = TRUE)
set.seed(5L)
@


\section{Objects}
\begin{frame}{Content}
\vfill
\tableofcontents[currentsection]
\vfill
\end{frame}

\begin{frame}{Definitions}
\h{What is an \underline{object}?}

An instance of a class.

\vfill

\h{What is a \underline{class}?}

A data structure for which specific methods can be defined.

\vfill

\h{What is a \underline{method}?}

A function that is designed to work with all objects of a given class.
\end{frame}

\begin{frame}{R is an object-based system}
\h{Rule \#1:}

\alert{Everything that exists in R is an object}
\begin{flushright}
(John M. Chambers)
\end{flushright}
\end{frame}

\begin{frame}[containsverbatim]{Example}
<<>>=
res <- 1
@
<<>>=
res
class(res)
methods(class = "numeric")
@
<<>>=
`<-`
class(`<-`)
methods(class = "function")
@
\end{frame}

\begin{frame}[containsverbatim]{What is the point of objects?}
\h{Using objects allows abstraction!}
\begin{columns}[t]
\column{0.32\linewidth}
<<>>=
foo1 <- 1:10

head(foo1)
@
\column{0.32\linewidth}
<<>>=
foo2 <- matrix(foo1, ncol = 1)

head(foo2)
@
\column{0.32\linewidth}
<<>>=
foo3 <- as.data.frame(foo2)

head(foo3)
@
\end{columns}
\end{frame}

\begin{frame}[containsverbatim]{Abstraction is made possible via \underline{methods}}
\h{Methods behind the \underline{generic function} \texttt{head}:}
<<>>=
methods(head)
@

\vfill

\h{Methods behind the \underline{generic function }\texttt{residuals}:}
<<>>=
methods(residuals)
@
\end{frame}



\begin{frame}[containsverbatim]{Objects are accessed or modified using \underline{references}}
\h{Reference = a name + an environment:}
<<>>=
ls()
environmentName(pryr::where("res"))
@
\end{frame}

\begin{frame}[containsverbatim]{Objects are accessed or modified using \underline{references}}
\h{Behind one reference there is one memory address:}
<<>>=
pryr::address(res)
@

\vfill

\h{Behind one memory address there can be several references:}
<<results='hold'>>=
res2 <- res
pryr::address(res2)
@

\vfill

\n{as we will see, the address behind a reference can change during computation.}
\end{frame}

\begin{frame}[containsverbatim]{Why \underline{environments} and not just names?}
Environments are used to define the \underline{scope} of the objects

(i.e. from where they can be seen and accessed)

\vfill

\begin{columns}[t]
\column{0.5\linewidth}
\h{To solve ambiguities:}
<<>>=
i <- 20
foo <- function() {i <- 1; return(i)}
foo()
i
@
\column{0.5\linewidth}
\h{To keep things tidy:}
<<echo = FALSE>>=
options(width = 40)
@
<<>>=
ls(".GlobalEnv")
head(ls("package:base"))
length(ls("package:base"))
@
<<echo = FALSE>>=
options(width = 80)
@
\end{columns}
\vfill

\n{environments are objects!}
\end{frame}



\begin{frame}{There are different systems for defining and using objects}

\h{Native class systems:}
\begin{itemize}
\item S3 (legacy from S version 3, in \emph{base})
\item S4 (legacy from S version 4, in core package \emph{methods})
\item Reference Class (sometimes referred to as R5, in \emph{methods})
\end{itemize}

\vfill
\pause

\h{Additional class systems:}
\begin{itemize}
\item R6 (in the package \emph{R6}, one of the most downloaded package on CRAN!)
\item ggproto (in the package \emph{ggplot2})
\item others (proto, \dots)
\end{itemize}

\vfill
\n{the objects created with one system can contain objects created with another.}
\end{frame}

\begin{frame}[containsverbatim]{You can create your own classes and methods}

\h{Example; we want to improve the following outputs:}

<<error = TRUE>>=
res
AIC(res)
@
\end{frame}


\begin{frame}[containsverbatim]{You can create your own classes and methods}

\h{Example using S3:}
<<>>=
resS3 <- 1
class(resS3) <- "alexS3"
print.alexS3 <- function(x, ...) print(paste("The object of class 'alexS3' is equal to", x), ...)
AIC.alexS3   <- function(x) return(NA)
@

<<>>=
resS3
AIC(resS3)
@
\end{frame}

\begin{frame}[containsverbatim]{You can create your own classes and methods}

\h{Example using S4:}

<<>>=
setClass("alexS4", slots = list(value = "numeric"))
setMethod("show", signature = "alexS4", definition = function(object)
  print(paste("The object of class 'alexS4' is equal to", object@value)))
setMethod("AIC", signature = "alexS4", definition = function(object) return(NA))
@

<<>>=
resS4 <- new("alexS4", value = 1)
resS4
AIC(resS4)
@
\end{frame}

\begin{frame}[containsverbatim]{You can create your own classes and methods}

\h{Example using RC:}
%if below the object is called alex, it interfere with the S4 registration!
<<>>=
alexRC <- setRefClass(Class   = "alexRC",
                      fields  = list(value = "numeric"),
                      methods = list(
                      show  = function()
                        print(paste("The object of class 'alexRC' is equal to", value)),
                      AIC   = function() return(NA)))
@

<<>>=
resRC <- alexRC$new(value = 1)
resRC
resRC$AIC()
@
\end{frame}

\begin{frame}[containsverbatim]{You can create your own classes and methods}

\h{Example using R6:}

<<>>=
library(R6)
alexR6 <- R6Class(
  public  = list(
    value = NA,
    initialize = function(value) self$value <- value,
    print = function()
        print(paste("The object of class 'alexR6' is equal to", self$value)),
    AIC = function() return(NA)
  )
)
@

<<>>=
resR6 <- alexR6$new(value = 1)
resR6
resR6$AIC()
@
\end{frame}


\section{Programming with objects}
\begin{frame}{Content}
\vfill
\tableofcontents[currentsection]
\vfill
\end{frame}

\begin{frame}{The 2 main object-based programming paradigms}
\begin{columns}[t]
\column{0.5\linewidth}
\h{Functional (Object Oriented) Programming}
\begin{itemize}
\item suitable for analytical workflows
\item S3, S4
\item methods defined outside the objects
\item objects are not mutable
\item a $\xrightarrow[]{\text{fn}}$ b $\xrightarrow[]{\text{fn}}$ c $\xrightarrow[]{\text{fn}}$\dots
\end{itemize}
\pause
\column{0.5\linewidth}
\h{Encapsulated Object Oriented Programming (aka OOP)}
\begin{itemize}
\item suitable for data that evolve over time (modularity and reusability)
\item RC, R6
\item methods defined inside the objects
\item objects are mutable
\item a $\xrightarrow[]{\text{fn}}$ b \& a $\xrightarrow[]{\text{fn}} \varnothing$
\end{itemize}
\end{columns}
\vfill
\n{actual programming can borrow from multiple paradigms (pure form is difficult).}
\end{frame}

\begin{frame}[containsverbatim]{Functional Programming: simple example}
<<>>=
res_fp <- 1
addone <- function(x) x + 1
res_fp <- addone(res_fp)
res_fp
@

<<>>=
replicate_fp1 <- function(n, obj, fn){
  for (i in 1:n) obj <- fn(obj)  ## not truly functional
  return(obj)
}
@
<<>>=
replicate_fp2 <- function(n, obj, fn, i = 1){
  res <- ifelse(n > 0, replicate_fp2(n = n - 1, obj = fn(obj), fn = fn), obj)
  return(res)
}
@
<<>>=
res_fp <- 1
res_fp <- replicate_fp2(n = 10, obj = res_fp, fn = addone)
res_fp
@
\end{frame}

\begin{frame}[containsverbatim]{Encapsulated OOP: simple example}
<<>>=
resObj <- R6Class(
  public  = list(
    value = NA,
    initialize = function(value) self$value <- value,
    addone = function() self$value <- self$value + 1
  )
)
@
<<>>=
res_oop <- resObj$new(value = 1)
res_oop$addone()
res_oop$value
@

<<>>=
res_oop$value <- 1
replicate(10, res_oop$addone())
res_oop$value
@
\end{frame}


\begin{frame}[containsverbatim]{Encapsulated OOP requires mutability}
\h{S3 objects are (generally) not mutable (same for S4):}
\begin{columns}[t]
\column{0.3\linewidth}
<<>>=
a <- 1:3
a
pryr::address(a)
@

\column{0.3\linewidth}
<<>>=
a[2] <- 10
a
pryr::address(a)
@
\column{0.3\linewidth}
<<>>=
b <- a
b
pryr::address(b)
@

<<>>=
b[2] <- 11
pryr::address(b)
pryr::address(a)
@
<<>>=
a
@
\end{columns}
\end{frame}

\begin{frame}[containsverbatim]{Encapsulated OOP requires mutability}
\h{R6 objects are mutable (same for RC):}

\begin{columns}[t]
\column{0.3\linewidth}
<<>>=
resR6$value
pryr::address(resR6)
@

\column{0.3\linewidth}
<<>>=
resR6$value <- 3
resR6$value
pryr::address(resR6)
@

\column{0.3\linewidth}
<<>>=
resR6_bis <- resR6
pryr::address(resR6_bis)
@

<<>>=
resR6_bis$value
resR6_bis$value <- 4
resR6_bis$value
@
<<>>=
resR6$value
@


\end{columns}
\end{frame}

\begin{frame}[containsverbatim]{Encapsulated OOP requires mutability}
\h{What can be mutable does not have to be!}

<<>>=
pryr::address(resR6)
resR6_ter <- resR6$clone()
pryr::address(resR6_ter)
@
<<>>=
resR6_ter$value <- 5
resR6_ter
resR6
@

\n{the cloning creates a physical copy of the original object and thus the 2 clones have different addresses\\ (confusing: 2 clones and more or less similar than 2 copies depending on how you think about it\dots)}

\end{frame}

\begin{frame}[containsverbatim]{Pros and cons of mutability}

\begin{columns}[t]
\column{0.3\linewidth}
\h{Pros}
\begin{itemize}
  \item less verbose
  \item save memory
\end{itemize}

\column{0.3\linewidth}
\h{Cons}
\begin{itemize}
  \item side effects
\end{itemize}
\end{columns}

\vfill

\n{most R operations perform copy-on-write (also called copy-on-modify) to avoid side effects.}

\end{frame}

\begin{frame}[containsverbatim]{Encapsulated OOP in S3 by messing with the scoping}
\begin{columns}[t]
\column{0.4\linewidth}
<<>>=
res <- 1
replicate(10, res <- addone(res))
res
@

<<>>=
res <- 1
replicate(10, res <<- addone(res))
res
@
\column{0.6\linewidth}
<<>>=
res <- 1
e <- environment()
replicate(10,
          eval(substitute(res <- addone(res)), envir = e))
res
@
\end{columns}
\vfill
\n{but the addresses do change (\texttt{res} is copied in memory many times).}

\n{this is also what the functions \texttt{`[`} rely on.}
\end{frame}


\section{Example: Individual Based Models using R6}
\begin{frame}{Content}
\vfill
\tableofcontents[currentsection]
\vfill
\end{frame}

\begin{frame}{Our Individual Based Models (IBM)}
\h{Setup:}
\begin{itemize}
  \item two age classes: children (0--14 yrs), adults (15+ yrs)
  \item children die at an average rate of 15 deaths per 1000 per year
  \item adults die at an average rate of 5 deaths per 1000 per year
  \item children do not reproduce
  \item adults reproduce at an average rate of 10 births per 1000 per year
\end{itemize}

\vfill

\h{Question:}

Starting with 1000 individuals (with age following a uniform distribution between 0 and 40 yrs), what is the number of children and adults after 50 years?
\end{frame}

\begin{frame}[containsverbatim]{Functional way using S3: functions}
<<>>=
death <- function(pop) {
  death_children <- rbinom(n = length(pop), size = 1, prob = 15/1000)
  death_adults   <- rbinom(n = length(pop), size = 1, prob = 5/1000)
  alive <- rep(1, length(pop))
  alive[pop < 15] <- 1 - death_children[pop < 15]
  alive[pop > 14] <- 1 - death_adults[pop > 14]
  pop <- pop[alive == 1]
  return(pop)
}

birth <- function(pop) {
  adults <- pop[pop > 14]
  babies_nb <- sum(rbinom(n = length(adults), size = 1, prob = 10/1000))
  babies <- rep(0, babies_nb)
  pop <- c(pop, babies)
  return(pop)
}

age <- function(pop) pop <- pop + 1
@
\end{frame}

\begin{frame}[containsverbatim]{Functional way using S3: run}
<<>>=
pop <- round(runif(1000, min = 0, max = 40))

for (i in 1:50) {
  pop <- birth(pop)
  pop <- death(pop)
  pop <- age(pop)
}
table(pop > 14)
@
\end{frame}

\begin{frame}[containsverbatim]{OOP way using R6: definition of the class \texttt{individual}}
<<>>=
individual <- R6Class(
  public  = list(
    age = NA,
    alive = 1,
    initialize = function(age = 0) {self$age <- age},
    die = function() {
      if (self$age < 15 & self$alive) self$alive <- 1 - rbinom(n = 1, size = 1, prob = 15/1000)
      if (self$age > 14 & self$alive) self$alive <- 1 - rbinom(n = 1, size = 1, prob =  5/1000)
    },
    reproduce = function() {
      ifelse(self$alive == 1 & self$age > 14, rbinom(n = 1, size = 1,  prob = 10/1000), FALSE)
    },
    aging = function() {
      if (self$alive == 1) {self$age <- self$age + 1; self$die()}
    }
  )
)
@
\end{frame}

\begin{frame}[containsverbatim]{OOP way using R6: test}
\h{You can test things before creating the population!}
\begin{columns}[t]
\column{0.5\linewidth}
<<>>=
alex <- individual$new()
alex
@
\column{0.5\linewidth}
<<>>=
for (i in 1:200) alex$aging()
alex
@
\end{columns}
\end{frame}

\begin{frame}[containsverbatim]{OOP way using R6: definition of the class \texttt{population}}
<<size = "tiny">>=
population <- R6Class(
  public  = list(
    individuals = list(),
    initialize = function(N = 1000) {
        for (i in 1:N)
          self$individuals[[i]] <- individual$new(age = round(runif(n = 1, min = 0, max = 40)))
    },
    repro = function() {
      for (i in 1:length(self$individuals)) 
        if (self$individuals[[i]]$reproduce() == TRUE)
          self$individuals[[length(self$individuals) + 1]] <- individual$new()
      },
    death = function(){
      alive <- sapply(self$individuals, function(i) i[["alive"]])
      self$individuals[!alive] <- NULL
      },
    aging = function(){
      for (i in 1:length(self$individuals)) self$individuals[[i]]$aging()
      },
    year = function() {self$repro(); self$death(); self$aging()},
    count = function() table(sapply(self$individuals, function(i) i[["age"]]) > 14)
  )
)
@
\end{frame}


\begin{frame}[containsverbatim]{OOP way using R6: run}
<<>>=
pop <- population$new()
for (i in 1:50) pop$year()
pop$count()
@
\vfill
\n{I did not handle the possible population crash, so it may crash :-/}
\end{frame}

\begin{frame}{Our Individual Based Models (IBM): \alert{UPDATE}}
\h{Setup:}
\begin{itemize}
  \item two age classes: children (0--14 yrs), adults (15+ yrs)
  \item children die at an average rate of 15 deaths per 1000 per year
  \item adults die at an average rate of 5 deaths per 1000 per year
  \item children do not reproduce
  \item adults reproduce at an average rate of 10 births per 1000 per year
  \item \alert{two sexes, females do not reproduce after 45 yrs (males do not reproduce)}
\end{itemize}

\vfill

\h{Question:}

Starting with 1000 individuals (with age following a uniform distribution between 0 and 40 yrs), what is the number of children and adults after 50 years?
\end{frame}

\begin{frame}[containsverbatim]{OOP way using R6: re-definition of the class \texttt{individual}}
<<size = "tiny">>=
individual <- R6Class(
  public  = list(
    age = NA,
    alive = 1,
    sex = NA,                                                              ##new
    initialize = function(age = 0) {
      self$age <- age
      self$sex <- ifelse(runif(1) < 0.5, "male", "female")                 ##new
    },
    die = function() {
      if (self$age < 15 & self$alive) self$alive <- 1 - rbinom(n = 1, size = 1, prob = 15/1000)
      if (self$age > 14 & self$alive) self$alive <- 1 - rbinom(n = 1, size = 1, prob =  5/1000)
    },
    reproduce = function() {
      ifelse(self$alive == 1 &
               (self$age > 14 & self$age < 44 & self$sex == "female"),     ##new
             rbinom(n = 1, size = 1,  prob = 10/1000), FALSE)
    },
    aging = function() {
      if (self$alive == 1) {self$age <- self$age + 1; self$die()}
    }
  )
)
@
\n{there is no need to redefine the class \texttt{population}!}
\end{frame}

\begin{frame}[containsverbatim]{OOP way using R6: re-run}
<<>>=
pop <- population$new()
for (i in 1:50) pop$year()
pop$count()
@
\end{frame}

\begin{frame}{Functional way using S3: re-defining functions}
We would have to recode everything \dots
\end{frame}

\begin{frame}[containsverbatim]{Pros and cons of R6 for IBM}

\begin{columns}[t]
\column{0.5\linewidth}
\h{Pros}
\begin{itemize}
  \item clearer structure (see butterfly example)
  \item easier to modify once in existing
  \item easier to share classes between projects, packages\dots
  \item easier to translate to C++
\end{itemize}

\column{0.5\linewidth}
\h{Cons}
\begin{itemize}
  \item initially difficult for those knowing mostly S3
  \item much slower (cost can somewhat be reduced with some tweaks)
  \item additional issues to take care (e.g. side effects)
\end{itemize}
\end{columns}
\end{frame}

\section{Conclusion}
\begin{frame}{Content}
\vfill
\tableofcontents[currentsection]
\vfill
\end{frame}

\begin{frame}{Remember}
\begin{itemize}
  \item everything that exists in R is an object
  \item several class systems can be used to create objects 
  \item S3 and S4 are more suitable to functional programming
  \item RC and R6 are more suitable to encapsulated OOP
  \item most existing methods are writen in S3
  \item the focus of R on a functional paradigm based on objects is quite unusual
  \item which programming paradigm and which class system to rely on depends on your task and tastes\footnote{it is a vast and complex topic, I barely scratched the surface\dots}
\end{itemize}
\end{frame}

\begin{frame}
\centering
\huge{Did you sort your legos?}
\vfill
\n{did you have a lot of them?}
\end{frame}


\end{document}